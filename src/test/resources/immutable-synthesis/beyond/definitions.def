predicate lseg(loc x, set s) {
|  x == 0        => { s =i {} ; emp }
|  not (x == 0)  => { s =i {v} ++ s1 ; [[x, 2]]@0 ** [x :-> v]@1 ** [(x + 1) :-> nxt]@0 ** lseg(nxt, s1)[0,1] }
}

predicate dllseg(loc x, loc z, set s) {
|  x == 0 => { s =i {} ; emp }
|  not (x == 0) =>

   { s =i {v} ++ s1 ; [[x, 3]]@0 ** [x :-> v]@1 ** [(x + 1) :-> w]@2 ** [(x + 2) :-> z]@3 ** dllseg(w, x, s1)[0,1,2,3] }
}

predicate sll(loc x, int len, set s) {
|  x == 0        => { s =i {} ; emp }
|  not (x == 0)  => {  len == 1 + len1 /\ s =i {v} ++ s1 ; [[x, 2]]@0 ** [x :-> v]@1 ** [(x + 1) :-> nxt]@2 ** sll(nxt, len1, s1)[0,1,2] }
}

{ true; (prev + 1) :-> x ** dllseg(x, z, s)[mut, mut, mut, mut] }
void set_prev(loc x, loc prev)
{ true; (prev + 1) :-> x ** dllseg(x, prev, s)[mut, mut, mut, mut]}

