should be able to synthesize list length from the root pointer

#####

{0 <= n ; r :-> x ** lsegn(x, 0, n)[imm, imm, imm] }
void list_len(loc r)
{true ; r :-> n ** lsegn(x, 0, n)[abs, abs, abs]}

#####

void list_len (loc r) {
  let x2 = *r;
  if (x2 == 0) {
  } else {
    let nxt2 = *(x2 + 1);
    *r = nxt2;
    list_len(r);
    let len12 = *r;
    *r = 1 + len12;
  }
}

Successfully synthesised in 606 milliseconds:
Number of backtrackings 4
Lasting successful rule applications: 29
Total successful rule applications: 31
Final size of SMT cache: 74
Number of saved negative results: 2
Number of saved positive results: 29
Number of recalled negative results: 0
Number of recalled positive results: 0

void list_len (loc r) {
  let x2 = *r;
  if (x2 == 0) {
  } else {
    let nxt2 = *(x2 + 1);
    *r = nxt2;
    list_len(r);
    let len12 = *r;
    *r = 1 + len12;
  }
}

vs not including the list in the post

Successfully synthesised in 473 milliseconds:
Number of backtrackings 0
Lasting successful rule applications: 20
Total successful rule applications: 20
Final size of SMT cache: 45
Number of saved negative results: 0
Number of saved positive results: 20
Number of recalled negative results: 0
Number of recalled positive results: 0

void list_len (loc r) {
  let x2 = *r;
  if (x2 == 0) {
  } else {
    let nxt2 = *(x2 + 1);
    *r = nxt2;
    list_len(r);
    let len12 = *r;
    *r = 1 + len12;
  }
}

with abs
Successfully synthesised in 551 milliseconds:
Number of backtrackings 2
Lasting successful rule applications: 32
Total successful rule applications: 33
Final size of SMT cache: 73
Number of saved negative results: 1
Number of saved positive results: 32
Number of recalled negative results: 0
Number of recalled positive results: 0

void list_len (loc r) {
  let x2 = *r;
  if (x2 == 0) {
  } else {
    let nxt2 = *(x2 + 1);
    *r = nxt2;
    list_len(r);
    let len12 = *r;
    *r = 1 + len12;
  }
}


with imm
