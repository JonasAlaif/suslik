# -b true -c 2
binary search tree: insert an element

more fine-grained immutability
TODO insert this - it tends to fail
#####

{0 <= n /\ 0 <= k /\ k <= 7 ; r :-> k ** bst(x, n, lo, hi)[M, M, M, M] }
void bst_insert (loc x, loc r)
{n1 == n + 1 /\ lo1 == (k <= lo ? k : lo)  /\ hi1 == (hi <= k ? k : hi) ; r :-> y ** bst(y, n1, lo1, hi1)[M, M, M, M] }

#####

void bst_insert (loc x, loc r) {
  let k2 = *r;
  if (x == 0) {
    let y2 = malloc(3);
    *r = y2;
    *(y2 + 1) = 0;
    *(y2 + 2) = 0;
    *y2 = k2;
  } else {
    let v2 = *x;
    if (k2 <= v2) {
      let l2 = *(x + 1);
      bst_insert(l2, r);
      let y12 = *r;
      *(x + 1) = y12;
      *r = x;
    } else {
      let r12 = *(x + 2);
      bst_insert(r12, r);
      let y12 = *r;
      *(x + 2) = y12;
      *r = x;
    }
  }
}


Successfully synthesised in 28085 milliseconds:
Number of backtrackings 17663
Lasting successful rule applications: 87
Total successful rule applications: 8959
Final size of SMT cache: 4699
Number of saved negative results: 6487
Number of saved positive results: 87
Number of recalled negative results: 876
Number of recalled positive results: 0
