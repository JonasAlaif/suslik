singly-linked list: append

#####

{true ; sll(x1, s1)[I@a, I@b, M] ** sll(x2, s2)[I@a, I@b, M] ** ret :-> x2}
void sll_append (loc x1, loc ret)
{s =i s1 ++ s2 ; sll(y, s)[I@a, I@b, M] ** ret :-> y }

#####

void sll_append (loc x1, loc ret) {
  if (x1 == 0) {
  } else {
    let nxt2 = *(x1 + 1);
    sll_append(nxt2, ret);
    let y12 = *ret;
    *(x1 + 1) = y12;
    *ret = x1;
  }
}


{true ; sll(x1, s1) ** sll(x2, s2) ** ret :-> x2}
void sll_append(loc x1, loc ret)
{s == s1 ++ s2 ; sll(y, s) ** ret :-> y}

Successfully synthesised in 1019 milliseconds:
Number of backtrackings 17
Lasting successful rule applications: 25
Total successful rule applications: 35
Final size of SMT cache: 97
Number of saved negative results: 8
Number of saved positive results: 25
Number of recalled negative results: 0
Number of recalled positive results: 0

void sll_append (loc x1, loc ret) {
  if (x1 == 0) {
  } else {
    let nxt2 = *(x1 + 1);
    sll_append(nxt2, ret);
    let y12 = *ret;
    *(x1 + 1) = y12;
    *ret = x1;
  }
}
