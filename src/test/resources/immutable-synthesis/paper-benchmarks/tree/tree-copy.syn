should be able to synthesize a tree copy (with elements)

#####

<<<<<<< HEAD
{true ; r :-> x ** tree(x, s)}
void tree_copy(loc r)
{true ; r :-> y ** tree(x, s) ** tree(y, s) }
=======
{true ; r :-> x ** tree(x, s)[imm, imm, imm, imm]}
void tree_copy(loc r)
{true ; r :-> y ** tree(x, s)[abs, abs, abs, abs] ** tree(y, s)[mut, mut, mut, mut] }
>>>>>>> 6551f85... Changes to tests

#####

void tree_copy (loc r) {
  let x2 = *r;
  if (x2 == 0) {
  } else {
    let v2 = *x2;
    let l2 = *(x2 + 1);
    let r12 = *(x2 + 2);
    *r = l2;
    tree_copy(r);
    let y12 = *r;
    *x2 = r12;
    tree_copy(x2);
    let y22 = *x2;
    let y3 = malloc(3);
    *(x2 + 1) = y12;
    *(x2 + 2) = y22;
    *r = y3;
    *(y3 + 1) = l2;
    *(y3 + 2) = r12;
    *y3 = v2;
    *x2 = v2;
  }
}