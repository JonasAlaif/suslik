singly-linked list: max

#####

predicate sll(loc x, int len, int lo, int hi) {
|  x == 0        => { len == 0  /\  lo == 7  /\  hi == 0 ; emp }
|  not (x == 0)  => { len == 1 + len1  /\  0 <= len1  /\  lo == (v <= lo1 ? v : lo1)  /\  hi == (hi1 <= v ? v : hi1) /\ 0 <= v /\ v <= 7;
                      [[x, 2]]@0 ** [x :-> v]@1 ** [(x + 1) :-> nxt]@2 ** sll(nxt, len1, lo1, hi1)[0,1,2] }
}


{true ; ret :-> a ** sll(x, n, lo, hi)[I@a,I@b,I@c] }
void sll_max (loc x, loc ret)
{true ; ret :-> hi ** sll(x, n, lo, hi)[I@a,I@b,I@c] }

#####

void sll_max (loc x, loc ret) {
  if (x == 0) {
    *ret = 0;
  } else {
    let v2 = *x;
    let nxt2 = *(x + 1);
    sll_max(nxt2, ret);
    let hi12 = *ret;
    *ret = hi12 <= v2 ? v2 : hi12;
  }
}