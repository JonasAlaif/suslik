predicate srtl(loc x, int len, int lo, int hi) {
|  x == 0        => { len == 0  /\  lo == 7000  /\  hi == 0 ; emp }
|  not (x == 0)  => { len == 1 + len1  /\  0 <= len1  /\  lo == (v <= lo1 ? v : lo1)  /\  hi == (hi1 <= v ? v : hi1) /\ v <= lo1 /\ 0 <= v /\ v <= 7000 ;
                      [x, 2] ** x :-> v ** (x + 1) :-> nxt ** srtl(nxt, len1, lo1, hi1) }
}

predicate isrtl(loc x, int len, int lo, int hi) {
|  x == 0        => { len == 0  /\  lo == 7000  /\  hi == 0 ; emp }
|  not (x == 0)  => { len == 1 + len1  /\  0 <= len1  /\  lo == (v <= lo1 ? v : lo1)  /\  hi == (hi1 <= v ? v : hi1) /\ v <= lo1 /\ 0 <= v /\ v <= 7000 ;
                      [[x, 2]]@0 ** [x :-> v]@1 ** [(x + 1) :-> nxt]@2 ** isrtl(nxt, len1, lo1, hi1)[0,1,2]}
}

predicate isrtl_nolen(loc x, int lo, int hi) {
|  x == 0        => { lo == 7000  /\  hi == 0 ; emp }
|  not (x == 0)  => { lo == (v <= lo1 ? v : lo1)  /\  
                      hi == (hi1 <= v ? v : hi1) /\ 
                      v <= lo1 /\ 0 <= v /\ v <= 7000 ;
                      [[x, 2]]@0 ** [x :-> v]@1 ** [(x + 1) :-> nxt]@2 ** isrtl_nolen(nxt, lo1, hi1)[0,1,2]}
}