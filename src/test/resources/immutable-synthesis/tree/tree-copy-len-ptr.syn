should be able to synthesize a tree copy

#####

<<<<<<< HEAD
{0 <= n ; r :-> x ** treeN(x, n)}
void tree_copy(loc r)
{true ; r :-> y ** treeN(x, n) ** treeN(y, n) }
=======
{0 <= n ; r :-> x ** treeN(x, n)[imm, imm, imm, imm]}
void tree_copy(loc r)
{true ; r :-> y ** treeN(x, n)[abs, abs, abs, abs] ** treeN(y, n)[mut, mut, mut, mut] }
>>>>>>> 6551f85... Changes to tests

#####

void tree_copy (loc r) {
  let x2 = *r;
  if (x2 == 0) {
  } else {
    let l2 = *(x2 + 1);
    let r12 = *(x2 + 2);
    *r = l2;
    tree_copy(r);
    let y12 = *r;
    *x2 = r12;
    tree_copy(x2);
    let y22 = *x2;
    let y3 = malloc(3);
    *(x2 + 1) = y12;
    *(x2 + 2) = y22;
    *r = y3;
    *(y3 + 1) = l2;
    *(y3 + 2) = r12;
  }
}