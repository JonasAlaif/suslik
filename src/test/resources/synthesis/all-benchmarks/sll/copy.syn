# -c 3 -o 3 -p true

should be able to synthesize list copy

#####

predicate pred_B(loc box, int v) {
| true => { [box, 1] ** box :-> v }
}
predicate pred_TB(loc tpl, int v0, int v1) {
| true => { [tpl, 2] ** tpl+0 :-> box0 ** pred_B(box0, v0) ** tpl+1 :-> box1 ** pred_B(box1, v1) }
}
predicate pred_TB2(loc tpl, int v0, int v1) {
| true => { [tpl, 2] ** tpl+0 :-> box0 ** pred_B(box0, v0) ** tpl+1 :-> box1 ** pred_B(box1, v1) }
}
predicate pred_BTB(loc box, int v0, int v1) {
| true => { [box, 1] ** box+0 :-> tpl ** pred_TB(tpl, v0, v1) }
}

{ RESULT :-> a ** pred_TB(X, v0, v1) }
void box_and_swap(loc X, loc RESULT)
{ RESULT :-> r ** pred_TB2(r, v0, v1) }


#####

void sll_copy (loc r) {
  let x = *r;
  if (x == 0) {
  } else {
    let v = *x;
    let n = *(x + 1);
    *x = n;
    sll_copy(x);
    let yx = *x;
    let y = malloc(2);
    *r = y;
    *(y + 1) = yx;
    *x = v;
    *y = v;
  }
}