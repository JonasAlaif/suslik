predicate lsegN(x, y, len) {
|  x == y        => { len == 0 ; emp }
|  not (x == y)  => { len == 1 + len1  /\  0 <= len1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lseg(nxt, y, len1) }
}

predicate tree0(x) {
|  x == 0        => {emp}
|  not (x == 0)  => {[x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** tree0(l) ** tree0(r)}
}

predicate treeN(x, n) {
|  x == 0        => {n == 0 ; emp}
|  not (x == 0)  => { n == 1 + n1 + n2  /\  0 <= n1  /\  0 <= n2 ;
                     [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** treeN(l, n1) ** treeN(r, n2)}
}

predicate lseg(x, y, S) {
|  x == y        => { S =i {} ; emp }
|  not (x == y)  => { S =i {v} ++ S1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lseg(nxt, y, S1) }
}

predicate tree(x, S) {
|  x == 0        => {S =i {}; emp}
|  not (x == 0)  => {S =i {v} ++ S1 ++ S2 ; [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** tree(l, S1) ** tree(r, S2)}
}

