predicate sll(loc x, set s) {
|  x == 0        => { s =i {} ; emp }
|  not (x == 0)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, s1) }
}

predicate sll_card(loc x, set s) {
|  x == 0        => { s =i {} /\ self_card == 0 ; emp }
|  not (x == 0)  => { s =i {v} ++ s1 /\ self_card == b + 2 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll_card(nxt, s1)<b> }
}

predicate tree(loc x) {
|  x == 0        => {emp}
|  not (x == 0)  => {[x, 3] ** x :-> 0 ** (x + 1) :-> l ** (x + 2) :-> r ** tree(l) ** tree(r)}
}

predicate tree_elem(loc x, int e) {
|  x == 0        => {emp}
|  not (x == 0)  => {[x, 3] ** x :-> e ** (x + 1) :-> l ** (x + 2) :-> r ** tree_elem(l, e) ** tree_elem(r, e)}
}