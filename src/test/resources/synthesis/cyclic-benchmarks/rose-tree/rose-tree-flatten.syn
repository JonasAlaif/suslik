# -o 5 -c 2 -x true -p true --lexi true

should be able to flatten a rose tree into a list

###

{ r :-> x ** rose_tree(x, s) }
  void rose_tree_flatten(loc r)
{ r :-> y ** sll(y, s) }

###

{r :-> x ** rose_tree(x, s)<_alpha_517>}
{r :-> y ** sll(y, s)<_alpha_518>}
void rose_tree_flatten (loc r) {
  let x = *r;
  if (x == 0) {
  } else {
    rose_tree_flatten10(x, r);
  }
}

{_alpha_513x2 < _alpha_517 && not (r == 0) && not (x2 == 0) && s =i {vx2} ++ s1x2 ; (x2 + 1) :-> bx2 ** r :-> x2 ** x2 :-> vx2 ** buds(bx2, s1x2)<_alpha_513x2>[1] ** [x2, 2]}
{r :-> y ** sll(y, s)<_alpha_518>}
void rose_tree_flatten10 (loc x2, loc r) {
  let v = *x2;
  let b = *(x2 + 1);
  if (b == 0) {
  } else {
    let rb = *b;
    let n = *(b + 1);
    *r = rb;
    rose_tree_flatten(r);
    let y = *r;
    *(x2 + 1) = n;
    *r = x2;
    rose_tree_flatten10(x2, r);
    rose_tree_flatten13126(y, n, rb, b, v, x2, r);
  }
}

{_alpha_513x2 < _alpha_517 && _alpha_513x21 == _alpha_515bx22 && _alpha_514bx22 < _alpha_513x2 && _alpha_515bx22 < _alpha_513x2 && _alpha_5172 == _alpha_515bx22 + 1 && bx21 == nxtbx222 && not (bx22 == 0) && not (bx22 == r) && not (bx22 == x2) && not (r == 0) && not (r == x2) && not (x2 == 0) && r == r2 && s =i {vx22} ++ s1x2 && s1x2 =i s1 ++ s2bx22 && s1x21 =i s2bx22 && s2 =i {vx22} ++ s2bx22 && vx21 == vx22 && x2 == x21 ; (bx22 + 1) :-> nxtbx222 ** bx22 :-> rbx222 ** r2 :-> y2 ** sll(y12, s1)<_alpha_5181>[4] ** sll(y2, s2)<_alpha_5182>[4] ** [bx22, 2]}
{r :-> y ** sll(y, s)<_alpha_518>}
void rose_tree_flatten13126 (loc y12, loc nxtbx222, loc rbx222, loc bx22, int vx22, loc x2, loc r) {
  if (y12 == 0) {
    free(bx22);
  } else {
    let v = *y12;
    let n = *(y12 + 1);
    rose_tree_flatten13126(n, n, v, y12, vx22, bx22, r);
    let y = *r;
    *(bx22 + 1) = y;
    *r = bx22;
    *bx22 = v;
  }
}

###

1
1
1
2
1
1
1
1
3
1
2
3
1
1
2
1
1
1
1
1
3
1
1
2
1
1
1
2
