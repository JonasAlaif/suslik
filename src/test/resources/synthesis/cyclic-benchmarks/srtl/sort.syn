# -x true -b true -c 2 -p true

sort a list

#####

{ 0 <= n ; r :-> 0 ** sll(x, n, lo, hi) }
void sort (loc x, loc r)
{ true ; r :-> y ** srtl(y, n, lo, hi) }

#####

{0 <= n ; r :-> 0 ** sll(x, n, lo, hi)<_alpha_592>}
{r :-> y ** srtl(y, n, lo, hi)<_alpha_593>}
void sort (loc x, loc r) {
  if (x == 0) {
  } else {
    let v = *x;
    let n = *(x + 1);
    sort(n, r);
    sort118(n, v, x, r);
  }
}

{0 <= 1 + len1x && 0 <= len1x && 0 <= vx2 && _alpha_589x < _alpha_592 && not (r == 0) && not (r == x) && not (x == 0) && vx2 <= 7 ; (x + 1) :-> nxtx2 ** r :-> y1 ** x :-> vx2 ** srtl(y1, len1x, lo1x, hi1x)<_alpha_5931>[1,0] ** [x, 2]}
{not (r == 0) ; r :-> y ** srtl(y, 1 + len1x, vx2 <= lo1x ? vx2 : lo1x, hi1x <= vx2 ? vx2 : hi1x)<_alpha_593>}
void sort118 (loc nxtx2, int vx2, loc x, loc r) {
  let y1 = *r;
  if (y1 == 0) {
    *(x + 1) = 0;
    *r = x;
  } else {
    let v = *y1;
    if (vx2 <= v) {
      let n = *(y1 + 1);
      *r = n;
      sort118(n, v, y1, r);
      let y = *r;
      *(x + 1) = y;
      *r = x;
    } else {
      let n = *(y1 + 1);
      *r = n;
      *(y1 + 1) = nxtx2;
      *y1 = vx2;
      sort118(nxtx2, vx2, y1, r);
      let y = *r;
      *(x + 1) = y;
      *r = x;
      *x = v;
    }
  }
}

