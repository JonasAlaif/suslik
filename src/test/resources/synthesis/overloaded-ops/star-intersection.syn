#. -b true
intersect given sll with set of one element


#####

predicate sll(loc x, set s) {
|  x == 0        => { s =i {} ; emp }
|  not (x == 0)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** sll(nxt, s1) }
}

{true ; sll(old_sll, old_elems) ** ret :-> second_set_elem}
void sll_intersect (loc old_sll, loc ret)
{intersect_elems =i old_elems * {second_set_elem} ; sll(new_sll, intersect_elems) ** ret :-> new_sll }

#####

void sll_intersect (loc old_sll, loc ret) {
  let second_set_elem2 = *ret;
  if (old_sll == 0) {
    *ret = 0;
  } else {
    let v2 = *old_sll;
    if (true && v2 <= second_set_elem2 && second_set_elem2 <= v2) {
      let nxt2 = *(old_sll + 1);
      sll_intersect(nxt2, ret);
      let new_sll12 = *ret;
      *(old_sll + 1) = new_sll12;
      *ret = old_sll;
    } else {
      let nxt2 = *(old_sll + 1);
      sll_intersect(nxt2, ret);
      free(old_sll);
    }
  }
}