predicate tree(loc x, int sz) {
|  true  => { x :-> tag ** tree_inner(x, tag, sz) }
}


predicate tree_inner(loc x, int tag, int sz) {
|  tag == 1  => { sz == 1 ; [x,2] ** x + 1 :-> v }
|  tag == 0  => { sz == 1 + sz1 + sz2  /\  1 <= sz1 /\  1 <= sz2 ;
                 [x, 4] ** x + 1 :-> v ** (x + 2) :-> l ** (x + 3) :-> r ** tree(l, sz1) ** tree(r, sz2)  }
}

predicate packed_tree(loc x, int sz) {
|  true  => {x :-> tag ** packed_tree_inner(x, tag, sz)}
}

predicate packed_tree_inner(loc x, int tag, int sz) {
|  tag == 1  => { sz == 1 ; x + 1 :-> v }
|  tag == 0  => { sz == 1 + sz1 + sz2  /\  1 <= sz1 /\  1 <= sz2 ;
                 x + 1 :-> v ** packed_tree(x + 2, sz1) ** packed_tree(x + (2*(1 + sz1)), sz2)  }
}


