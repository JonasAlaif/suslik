should be able to flatten the tree into a list given an auxiliary function for list appending

####

{true ; sll(x1, s1) ** sll(x2, s2) ** ret :-> x2}
void sll_append (loc x1, loc ret)
{s =i s1 ++ s2 ; sll(y, s) ** ret :-> y }

{ true ; z :-> x ** tree(x, s)}
void tree_flatten(loc z)
{ true ;  z :-> y ** sll(y, s)}

####

void tree_flatten (loc z) {
  let x2 = *z;
  if (x2 == 0) {
  } else {
    let v2 = *x2;
    let l2 = *(x2 + 1);
    let r2 = *(x2 + 2);
    *x2 = l2;
    tree_flatten(x2);
    *z = r2;
    tree_flatten(z);
    let y22 = *z;
    sll_append(y22, x2);
    let y32 = *x2;
    let y4 = malloc(2);
    free(x2);
    *z = y4;
    *(y4 + 1) = y32;
    *y4 = v2;
  }
}