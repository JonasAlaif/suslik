predicate sll(loc x, set s, perm p, perm n, perm a) {
|  x == 0        => { s == {} ; emp }
|  not (x == 0)  => { s == {v} ++ s1 ; [x, 2]@a ** x :->@p v ** (x + 1) :->@n nxt
                                        ** sll(nxt, s1, p, n, a) }
}

predicate ulist(loc x, set s, perm p, perm n, perm a) {
|  x == 0        => { s == {} ; emp }
|  not (x == 0)  => { s == {v} ++ s1 && not (v in s1);
                      [x, 2]@a ** x :->@p v ** (x + 1) :->@n nxt ** ulist(nxt, s1, p, n, a) }
}

predicate sll_bounded(loc x, int len, interval s, perm p, perm n, perm a) {
|  x == 0        => { len == 0  && s == [] ; emp }
|  not (x == 0)  => { 0 <= len1 && len == len1 + 1 && s == s1 + [v]  ;
                      [x, 2]@a ** x :->@p v ** (x + 1) :->@n nxt ** sll_bounded(nxt, len1, s1, p, n, a) }
}