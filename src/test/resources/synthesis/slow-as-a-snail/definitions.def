predicate lseg(loc x, set s) {
|  x == 0        => { s =i {} ; emp }
|  not (x == 0)  => { s =i {v} ++ s1 ; [x, 2] ** x :-> v ** (x + 1) :-> nxt ** lseg(nxt, s1) }
}

predicate dllseg(loc x, loc z, set s) {
|  x == 0 => { s =i {} ; emp }
|  not (x == 0) =>
   { s =i {v} ++ s1 ; [x, 3] ** x :-> v ** (x + 1) :-> w ** (x + 2) :-> z ** dllseg(w, x, s1) }
}

{ true; (prev + 1) :-> x ** dllseg(x, z, s) }
void set_prev(loc x, loc prev)
{ true; (prev + 1) :-> x ** dllseg(x, prev, s)}

predicate bst(loc x, int sz, int lo, int hi) {
|  x == 0        => { sz == 0  /\  lo == 7  /\  hi == 0 ; emp }
|  not (x == 0)  => { sz == 1 + sz1 + sz2  /\  0 <= sz1 /\  0 <= sz2  /\                        
                      lo == (v <= lo1 ? v : lo1)  /\  hi == (hi2 <= v ? v : hi2) /\ 
                      0 <= v /\ v <= 7 /\ hi1 <= v /\ v <= lo2 ;
                      [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** 
                      bst(l, sz1, lo1, hi1)<al> ** bst(r, sz2, lo2, hi2)<ar>  }
}