predicate tree(loc x) {
|  x == 0        => {emp}
|  not (x == 0)  => {a < self_card /\ b < self_card ; [x, 3] ** x :-> 0 ** (x + 1) :-> l ** (x + 2) :-> r ** tree(l)<a> ** tree(r)<b>}
}

predicate tree_elem(loc x, int e) {
|  x == 0        => {emp}
|  not (x == 0)  => {a < self_card /\ b < self_card ; [x, 3] ** x :-> e ** (x + 1) :-> l ** (x + 2) :-> r ** tree_elem(l, e)<a> ** tree_elem(r, e)<b>}
}

predicate treeN(loc x, int n) {
|  x == 0        => { n == 0 ; emp }
|  not (x == 0)  => { a < self_card /\ b < self_card /\ n == 1 + n1 + n2  /\  0 <= n1  /\  0 <= n2 ;
                     [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** treeN(l, n1)<a> ** treeN(r, n2)<b>}
}

predicate treeS(loc x, set s) {
|  x == 0        => {s =i {}; emp}
|  not (x == 0)  => {s =i {v} ++ s1 ++ s2 /\ a < self_card /\ b < self_card; [x, 3] ** x :-> v ** (x + 1) :-> l ** (x + 2) :-> r ** treeS(l, s1)<a> ** treeS(r, s2)<b>}
}

predicate lseg(loc x, loc y) {
|  x == y        => {emp}
|  not (x == y)  => {a < self_card ; [x, 2] ** x :-> 0 ** (x + 1) :-> nxt ** lseg(nxt, y)<a>}
}
