package org.tygus.suslik.synthesis

import org.scalatest.{FunSpec, Matchers}
import org.tygus.suslik.language.Expressions.Var
import org.tygus.suslik.language.LocType
import org.tygus.suslik.language.Statements.{Load, Statement}
import org.tygus.suslik.logic
import org.tygus.suslik.logic.{PFormula, PointsTo, SFormula}
import org.tygus.suslik.logic.Specifications.Assertion
import org.tygus.suslik.synthesis.Evaluator._

import scala.collection.immutable.TreeSet

class EvaluatorTests extends FunSpec with Matchers with SynthesisRunnerUtil {

  override def doRun(testName: String, desc: String, in: String, out: String, params: SynConfig = defaultConfig): Unit = {
    super.doRun(testName, desc, in, out, params)
    it(desc) {
      synthesizeFromSpec(testName, in, out, params)
    }
  }

  describe("evaluator for functions generated by suslik") {
    it("evaluates Load correctly in the 'to' parameter") {
      //let v = *x where *x = "new"
      //expected result: all instances of v become "new"
      val s: Statement = Load(Var("v"), LocType, Var("x"))
      val pre: Assertion = Assertion(new PFormula(TreeSet()),
        SFormula(List(PointsTo(Var("x"), 0, Var("new")), PointsTo(Var("v"), 0, Var("somethingOtherThan(x)")))))
      val post: Assertion = Assertion(new PFormula(TreeSet()),
        SFormula(List(PointsTo(Var("x"), 0, Var("new")), PointsTo(Var("new"), 0, Var("somethingOtherThan(x)")))))
      assert(evaluate(s, pre) == post)
    }
    it("evaluates Load correctly in the 'from' parameter") {
      //let v = *x where *x = "new"
      //expected result: all instances of v become "new"
      val s: Statement = Load(Var("v"), LocType, Var("x"))
      val pre: Assertion = Assertion(new PFormula(TreeSet()),
        SFormula(List(PointsTo(Var("x"), 0, Var("new")), PointsTo(Var("somethingOtherThan(x)"), 0, Var("v")))))
      val post: Assertion = Assertion(new PFormula(TreeSet()),
        SFormula(List(PointsTo(Var("x"), 0, Var("new")), PointsTo(Var("somethingOtherThan(x)"), 0, Var("new")))))
      assert(evaluate(s, pre) == post)

    }
  }

}
